HashMap<K, V> is a part of Java’s collection since Java 1.2.
> This class is found in java.util package.
> It provides the basic implementation of the Map interface of Java. It stores the data in (Key, Value) pairs, and you can access them by an index of another type (e.g. an Integer).
> One object is used as a key (index) to another object (value). If you try to insert the duplicate key, it will replace the element of the corresponding key.
> HashMap is similar to HashTable, but it is unsynchronized.
> It allows to store the null keys as well, but there should be only one null key object and there can be any number of null values.
> This class makes no guarantees as to the order of the map.
> To use this class and its methods, you need to import java.util.HashMap package or its superclass.

> HashMap provides 4 constructors and the access modifier of each is public which are listed as follows:
1. HashMap()
2. HashMap(int initialCapacity)
3. HashMap(int initialCapacity, float loadFactor)
4. HashMap(Map map)

---------------------------------Important Features of HashMap---------------------------------------
> To access a value one must know its key.
> HashMap is known as HashMap because it uses a technique called Hashing.
> Hashing is a technique of converting a large String to small String that represents the same String.
> A shorter value helps in indexing and faster searches. HashSet also uses HashMap internally.

Few important features of HashMap are:
-> HashMap is a part of java.util package.
-> HashMap extends an abstract class AbstractMap which also provides an incomplete implementation of Map interface.
-> It also implements Cloneable and Serializable interface. K and V in the above definition represent Key and Value respectively.
-> HashMap doesn’t allow duplicate keys but allows duplicate values. That means A single key can’t contain more than 1 value but more than 1 key can contain a single value.
-> HashMap allows null key also but only once and multiple null values.
-> This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time. It is roughly similar to HashTable but is unsynchronized.

----------------------------------------------Performance of HashMap---------------------------------------
> Performance of HashMap depends on 2 parameters which are named as follows:
1. Initial Capacity
2. Load Factor

1. Initial Capacity – It is the capacity of HashMap at the time of its creation (It is the number of buckets a HashMap can hold when the HashMap is instantiated).
   In java, it is 2^4=16 initially, meaning it can hold 16 key-value pairs.

2. Load Factor – It is the percent value of the capacity after which the capacity of Hashmap is to be increased (It is the percentage fill of buckets after which Rehashing takes place).
                 In java, it is 0.75f by default, meaning the rehashing takes place after filling 75% of the capacity.

3. Threshold – It is the product of Load Factor and Initial Capacity. In java, by default, it is (16 * 0.75 = 12).
               That is, Rehashing takes place after inserting 12 key-value pairs into the HashMap.

4. Rehashing – It is the process of doubling the capacity of the HashMap after it reaches its Threshold.
               In java, HashMap continues to rehash(by default) in the following sequence – 2^4, 2^5, 2^6, 2^7, …. so on.