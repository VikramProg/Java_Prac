--------------------------TreeMap in Java--------------------------
> The TreeMap in Java is used to implement Map interface and NavigableMap along with the AbstractMap Class.
> The map is sorted according to the natural ordering of its keys, or by a Comparator provided at map creation time, depending on which constructor is used.
> This proves to be an efficient way of sorting and storing the key-value pairs.
> The storing order maintained by the treemap must be consistent with equals just like any other sorted map, irrespective of the explicit comparators.
> The treemap implementation is not synchronized in the sense that if a map is accessed by multiple threads,
  concurrently and at least one of the threads modifies the map structurally, it must be synchronized externally.

----------------------Features of a TreeMap------------------------
> Some important features of the treemap are as follows:

-> 1. This class is a member of the Java Collections Framework.
-> 2. The class implements Map interfaces including NavigableMap, SortedMap, and extends AbstractMap class.
-> 3. TreeMap in Java does not allow null keys (like Map) and thus a NullPointerException is thrown. However, multiple null values can be associated with different keys.
-> 4. Entry pairs returned by the methods in this class and its views represent snapshots of mappings at the time they were produced. They do not support the Entry.setValue method.

-> Now let us move forward and discuss Synchronized TreeMap. The implementation of a TreeMap is not synchronized.
-> This means that if multiple threads access a tree set concurrently, and at least one of the threads modifies the set, it must be synchronized externally.
-> This is typically accomplished by using the Collections.synchronizedSortedMap method. This is best done at the creation time, to prevent accidental unsynchronized access to the set.
-> This can be done as:

     SortedMap m = Collections.synchronizedSortedMap(new TreeMap(...));

----------------How TreeMap works internally?-----------------------

> The methods in a TreeMap while getting keyset and values, return an Iterator that is fail-fast in nature.
> Thus, any concurrent modification will throw ConcurrentModificationException.
> A TreeMap is based upon a red-black tree data structure.

> Each node in the tree has:

-> 3 Variables (K key=Key, V value=Value, boolean color=Color)
-> 3 References (Entry left = Left, Entry right = Right, Entry parent = Parent)

----------------Constructors in TreeMap-----------------------------
> In order to create a TreeMap, we need to create an object of the TreeMap class.
> The TreeMap class consists of various constructors that allow the possible creation of the TreeMap.
> The following are the constructors available in this class:

1. TreeMap()
2. TreeMap(Comparator comp)
3. TreeMap(Map M)
4. TreeMap(SortedMap sm)